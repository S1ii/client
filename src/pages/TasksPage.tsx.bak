import React, { useState, useEffect } from 'react';
import { useLanguage } from '../context/LanguageContext';
import { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors, DragEndEvent, DragOverEvent, DragStartEvent } from '@dnd-kit/core';
import { SortableContext, arrayMove, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';
import TaskCard from '../components/Tasks/TaskCard';
import TaskModal from '../components/Tasks/TaskModal';
import TaskEnhancer from '../components/Tasks/TaskEnhancer';
import { Task, tasksApi } from '../services/apiService';
import { 
  TextField, FormControl, InputLabel, Select, MenuItem, 
  Button, Card, CardContent, Typography, Divider, List, 
  Avatar, Chip, Badge, InputAdornment, Paper,
  Box
} from '@mui/material';
import { 
  AssignmentTurnedIn as CompletedIcon,
  AssignmentLate as InProgressIcon,
  PendingActions as PendingIcon,
  Assignment as TasksIcon,
  Search as SearchIcon,
  Add as AddIcon,
  TaskAlt as TaskAltIcon
} from '@mui/icons-material';

// UI компоненты будут созданы позже
// Временно используем базовые HTML элементы
// import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/card';
// import { Button } from '../components/ui/button';
// import { Input } from '../components/ui/input';
// import TableLoader from '../components/Loaders/TableLoader';
// import ErrorMessage from '../components/ErrorMessage';
// import { v4 as uuidv4 } from 'uuid';

type TaskStatus = 'todo' | 'in_progress' | 'done';

const TasksPage: React.FC = () => {
  const { t } = useLanguage();
  const [tasks, setTasks] = useState<Task[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [filterPriority, setFilterPriority] = useState<string>('all');
  const [sortBy, setSortBy] = useState<string>('newest');
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [activeTask, setActiveTask] = useState<Task | null>(null);
  const [showModal, setShowModal] = useState<boolean>(false);
  const [modalMode, setModalMode] = useState<'create' | 'edit'>('create');
  const [currentTask, setCurrentTask] = useState<Task | null>(null);
  
  // Сенсоры для DnD
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );
  
  // Группировка задач по статусу
  const todoTasks = Array.isArray(tasks) ? tasks.filter(task => task.status === 'todo') : [];
  const inProgressTasks = Array.isArray(tasks) ? tasks.filter(task => task.status === 'in_progress') : [];
  const doneTasks = Array.isArray(tasks) ? tasks.filter(task => task.status === 'done') : [];

  // Получение цвета для приоритета
  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'bg-red-500';
      case 'medium':
        return 'bg-yellow-500';
      case 'low':
        return 'bg-green-500';
      default:
        return 'bg-gray-500';
    }
  };

  // Форматирование даты
  const formatDate = (dateString: string | undefined) => {
    if (!dateString) return '';
    
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
    }).format(date);
  };

  // Загрузка задач
  useEffect(() => {
    const fetchTasks = async () => {
      try {
        setLoading(true);
        const tasksData = await tasksApi.getTasks();
        setTasks(tasksData);
        setError(null);
      } catch (err) {
        console.error('Error fetching tasks:', err);
        setError(t('failedToFetchTasks'));
        
        // Использование демо-данных если API недоступен
        setTasks([
          {
            id: '1',
            title: 'Создать презентацию',
            description: 'Подготовить презентацию для клиента по проекту',
            priority: 'high',
            status: 'todo',
            dueDate: '2023-12-15',
            assignedTo: 'Алексей Смирнов',
            createdAt: '2023-12-01T10:00:00Z',
            updatedAt: '2023-12-01T10:00:00Z'
          },
          {
            id: '2',
            title: 'Изучить документацию',
            description: 'Изучить новую версию API',
            priority: 'medium',
            status: 'in_progress',
            dueDate: '2023-12-10',
            assignedTo: 'Мария Иванова',
            createdAt: '2023-12-02T11:30:00Z',
            updatedAt: '2023-12-02T11:30:00Z'
          },
          {
            id: '3',
            title: 'Исправить баги',
            description: 'Исправить ошибки в модуле оплаты',
            priority: 'high',
            status: 'done',
            dueDate: '2023-12-05',
            assignedTo: 'Дмитрий Петров',
            createdAt: '2023-12-01T09:15:00Z',
            updatedAt: '2023-12-03T14:20:00Z'
          },
          {
            id: '4',
            title: 'Обновить зависимости',
            description: 'Обновить NPM пакеты до последних версий',
            priority: 'low',
            status: 'done',
            dueDate: '2023-11-28',
            assignedTo: 'Сергей Николаев',
            createdAt: '2023-12-04T15:10:00Z',
            updatedAt: '2023-12-04T15:10:00Z'
          },
          {
            id: '5',
            title: 'Встреча с клиентом',
            description: 'Обсудить требования к проекту',
            priority: 'medium',
            status: 'todo',
            dueDate: '2023-12-08',
            assignedTo: 'Елена Козлова',
            createdAt: '2023-12-03T13:00:00Z',
            updatedAt: '2023-12-03T13:00:00Z'
          }
        ]);
      } finally {
        setLoading(false);
      }
    };

    fetchTasks();
  }, [t]);

  // Фильтрация задач
  const getFilteredTasks = () => {
    let filteredTasks = Array.isArray(tasks) ? [...tasks] : [];
    
    // Фильтрация по поиску
    if (searchTerm) {
      filteredTasks = filteredTasks.filter(task => 
        task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        task.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        task.assignedTo?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    // Фильтрация по статусу
    if (filterStatus !== 'all') {
      filteredTasks = filteredTasks.filter(task => task.status === filterStatus);
    }
    
    // Фильтрация по приоритету
    if (filterPriority !== 'all') {
      filteredTasks = filteredTasks.filter(task => task.priority === filterPriority);
    }
    
    // Сортировка
    switch (sortBy) {
      case 'newest':
        filteredTasks.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
        break;
      case 'oldest':
        filteredTasks.sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());
        break;
      case 'dueDate':
        filteredTasks.sort((a, b) => new Date(a.dueDate || '').getTime() - new Date(b.dueDate || '').getTime());
        break;
      case 'priority':
        const priorityValues = { high: 3, medium: 2, low: 1 };
        filteredTasks.sort((a, b) => (priorityValues[b.priority as keyof typeof priorityValues] || 0) - 
                                    (priorityValues[a.priority as keyof typeof priorityValues] || 0));
        break;
      default:
        break;
    }
    
    return filteredTasks;
  };

  // Получение задач по статусу
  const getTasksByStatus = (status: TaskStatus) => {
    const filteredTasks = getFilteredTasks();
    return Array.isArray(filteredTasks) 
      ? filteredTasks.filter(task => task.status === status)
      : [];
  };

  // Обработчик начала перетаскивания
  const handleDragStart = (event: DragStartEvent) => {
    if (!Array.isArray(tasks)) return;
    
    const { active } = event;
    const activeTaskId = active.id.toString();
    const task = tasks.find(task => task.id === activeTaskId);
    
    if (task) {
      setActiveTask(task);
    }
  };

  // Обработчик перетаскивания над целью
  const handleDragOver = (event: DragOverEvent) => {
    if (!Array.isArray(tasks)) return;
    
    const { active, over } = event;
    
    if (!over || !active) return;
    
    const activeId = active.id.toString();
    const overId = over.id.toString();
    
    if (activeId === overId) return;
    
    const activeTask = tasks.find(task => task.id === activeId);
    const overTask = tasks.find(task => task.id === overId);
    
    if (!activeTask || !overTask) return;
    
    // Если задача перетаскивается в другую колонку
    if (activeTask.status !== overTask.status) {
      setTasks(tasks.map(task => 
        task.id === activeId 
          ? { ...task, status: overTask.status } 
          : task
      ));
    }
  };

  // Обработчик окончания перетаскивания
  const handleDragEnd = (event: DragEndEvent) => {
    if (!Array.isArray(tasks)) return;
    
    const { active, over } = event;
    setActiveTask(null);
    
    if (!over) return;
    
    const activeId = active.id.toString();
    const overId = over.id.toString();
    
    if (activeId === overId) return;
    
    // Найти индексы задач
    const activeIndex = tasks.findIndex(task => task.id === activeId);
    const overIndex = tasks.findIndex(task => task.id === overId);
    
    // Обновить список задач с новым порядком
    const updatedTasks = arrayMove(tasks, activeIndex, overIndex);
    setTasks(updatedTasks);
  };

  // Открыть модальное окно для создания задачи
  const handleOpenCreateModal = () => {
    setModalMode('create');
    setCurrentTask(null);
    setShowModal(true);
  };

  // Открыть модальное окно для редактирования задачи
  const handleOpenEditModal = (task: Task) => {
    setModalMode('edit');
    setCurrentTask(task);
    setShowModal(true);
  };

  // Закрыть модальное окно
  const handleCloseModal = () => {
    setShowModal(false);
    setCurrentTask(null);
  };

  // Обработка сохранения задачи
  const handleSaveTask = async (taskData: any) => {
    setLoading(true);
    
    try {
      if (modalMode === 'create') {
        // Создание новой задачи
        const newTask = await tasksApi.createTask(taskData);
        const updatedTasks = Array.isArray(tasks) ? [...tasks, newTask] : [newTask];
        setTasks(updatedTasks);
        
        // Убедимся, что фильтрованные задачи тоже обновляются
        if (
          (filterStatus === 'all' || filterStatus === newTask.status) &&
          (filterPriority === 'all' || filterPriority === newTask.priority) &&
          (!searchTerm || 
           newTask.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
           newTask.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
           newTask.assignedTo?.toLowerCase().includes(searchTerm.toLowerCase()))
        ) {
          // Если задача соответствует текущим фильтрам, обновим фильтрованный список
          console.log("Новая задача добавлена и отображена:", newTask);
        }
      } else if (modalMode === 'edit' && currentTask) {
        // Обновление существующей задачи
        const updatedTask = await tasksApi.updateTask(currentTask.id, taskData);
        const updatedTasks = Array.isArray(tasks) 
          ? tasks.map(task => task.id === updatedTask.id ? updatedTask : task) 
          : [updatedTask];
        setTasks(updatedTasks);
      }
      
      setShowModal(false);
      setCurrentTask(null);
      setError(null);
    } catch (err) {
      console.error('Error saving task:', err);
      setError(modalMode === 'create' ? t('failedToCreateTask') : t('failedToUpdateTask'));
    } finally {
      setLoading(false);
    }
  };

  // Обработчик удаления задачи
  const handleDeleteTask = async (id: string) => {
    if (!window.confirm(t('confirmDeleteTask'))) return;
    
    setLoading(true);
    
    try {
      await tasksApi.deleteTask(id);
      setTasks(Array.isArray(tasks) ? tasks.filter(task => task.id !== id) : []);
      setError(null);
    } catch (err) {
      console.error('Error deleting task:', err);
      setError(t('failedToDeleteTask'));
    } finally {
      setLoading(false);
    }
  };

  // Простые компоненты загрузки и ошибки
  if (loading) return (
    <div className="flex justify-center py-8">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[var(--primary-color)]"></div>
    </div>
  );
  
  if (error) return (
    <div className="p-4 bg-[var(--error-light)] text-white rounded-lg">{error}</div>
  );

  const filteredTasks = getFilteredTasks();

  return (
    <div className="container mx-auto px-4 py-8">
      <TaskEnhancer />
      
      <div className="flex justify-between items-center mb-6">
        <Typography variant="h4" className="font-bold">
          {t('taskManagement')}
        </Typography>
        
        <Button 
          variant="contained" 
          color="primary"
          startIcon={<AddIcon />}
          onClick={handleOpenCreateModal}
          className="bg-blue-600 hover:bg-blue-700 rounded-full px-4"
        >
          {t('addTask')}
        </Button>
      </div>
      
      {/* Статистика задач */}
      <div className="mb-6">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
          <Box className="p-4 rounded-xl bg-white/60 backdrop-blur-sm flex items-center cursor-pointer hover:shadow-md transition-all duration-200 stats-card">
            <div className="w-12 h-12 rounded-lg bg-gradient-to-br from-blue-400 to-blue-600 flex items-center justify-center mr-4 shadow-md">
              <PendingIcon className="text-white" />
            </div>
            <div>
              <Typography variant="h5" className="text-blue-500 font-bold fade-in">
                {todoTasks.length}
              </Typography>
              <Typography className="text-blue-600 font-medium text-sm">
                {t('pending')}
              </Typography>
            </div>
          </Box>
          
          <Box className="p-4 rounded-xl bg-white/60 backdrop-blur-sm flex items-center cursor-pointer hover:shadow-md transition-all duration-200 stats-card">
            <div className="w-12 h-12 rounded-lg bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center mr-4 shadow-md">
              <InProgressIcon className="text-white" />
            </div>
            <div>
              <Typography variant="h5" className="text-amber-500 font-bold fade-in">
                {inProgressTasks.length}
              </Typography>
              <Typography className="text-amber-600 font-medium text-sm">
                {t('inProgress')}
              </Typography>
            </div>
          </Box>
          
          <Box className="p-4 rounded-xl bg-white/60 backdrop-blur-sm flex items-center cursor-pointer hover:shadow-md transition-all duration-200 stats-card">
            <div className="w-12 h-12 rounded-lg bg-gradient-to-br from-emerald-400 to-emerald-600 flex items-center justify-center mr-4 shadow-md">
              <CompletedIcon className="text-white" />
            </div>
            <div>
              <Typography variant="h5" className="text-emerald-500 font-bold fade-in">
                {doneTasks.length}
              </Typography>
              <Typography className="text-emerald-600 font-medium text-sm">
                {t('completed')}
              </Typography>
            </div>
          </Box>
          
          <Box className="p-4 rounded-xl bg-white/60 backdrop-blur-sm flex items-center cursor-pointer hover:shadow-md transition-all duration-200 stats-card ring-2 ring-purple-500 ring-opacity-50">
            <div className="w-12 h-12 rounded-lg bg-gradient-to-br from-purple-400 to-purple-600 flex items-center justify-center mr-4 shadow-md">
              <Badge badgeContent={tasks.length} color="error" invisible={tasks.length === 0}>
                <TasksIcon className="text-white transform scale-110" />
              </Badge>
            </div>
            <div>
              <Typography variant="h5" className="text-purple-500 font-bold fade-in">
                {tasks.length}
              </Typography>
              <Typography className="text-purple-600 font-medium text-sm">
                {t('totalTasks')}
              </Typography>
            </div>
          </Box>
        </div>
      </div>
      
      {/* Фильтры и поиск */}
      <div className="mb-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <TextField
            placeholder={t('searchTasks')}
            variant="outlined"
            size="small"
            className="md:col-span-1"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            fullWidth
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon className="text-slate-400" />
                </InputAdornment>
              ),
            }}
          />
          
          <FormControl fullWidth>
            <InputLabel id="status-filter-label">{t('status')}</InputLabel>
            <Select
              labelId="status-filter-label"
              id="status-filter"
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              label={t('status')}
              size="small"
            >
              <MenuItem value="all">{t('all')}</MenuItem>
              <MenuItem value="todo">{t('todo')}</MenuItem>
              <MenuItem value="in_progress">{t('inProgress')}</MenuItem>
              <MenuItem value="done">{t('done')}</MenuItem>
            </Select>
          </FormControl>
          
          <FormControl fullWidth>
            <InputLabel id="priority-filter-label">{t('priority')}</InputLabel>
            <Select
              labelId="priority-filter-label"
              id="priority-filter"
              value={filterPriority}
              onChange={(e) => setFilterPriority(e.target.value)}
              label={t('priority')}
              size="small"
            >
              <MenuItem value="all">{t('all')}</MenuItem>
              <MenuItem value="high">{t('high')}</MenuItem>
              <MenuItem value="medium">{t('medium')}</MenuItem>
              <MenuItem value="low">{t('low')}</MenuItem>
            </Select>
          </FormControl>
          
          <FormControl fullWidth>
            <InputLabel id="sort-by-label">{t('sortBy')}</InputLabel>
            <Select
              labelId="sort-by-label"
              id="sort-by"
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
              label={t('sortBy')}
              size="small"
            >
              <MenuItem value="newest">{t('newest')}</MenuItem>
              <MenuItem value="oldest">{t('oldest')}</MenuItem>
              <MenuItem value="dueDate">{t('dueDate')}</MenuItem>
              <MenuItem value="priority">{t('priority')}</MenuItem>
            </Select>
          </FormControl>
        </div>
      </div>
      
      {/* Карточка задач */}
      <Card 
        variant="outlined" 
        className="rounded-2xl h-full bg-white/60 dark:bg-slate-800/60 backdrop-blur-sm border border-slate-100 dark:border-slate-700 transition-colors duration-200"
      >
        <CardContent className="p-5 relative">
          <div className="absolute right-5 top-5 w-20 h-20 bg-gradient-to-tr from-indigo-500/10 via-blue-500/5 to-transparent rounded-full blur-xl"></div>
          
          <div className="flex justify-between items-center mb-4">
            <div className="flex items-center">
              <Badge badgeContent={filteredTasks.length} color="primary" invisible={filteredTasks.length === 0} className="mr-2">
                <TaskAltIcon className="text-indigo-600 dark:text-indigo-400 mr-2" />
              </Badge>
              <Typography variant="h6" className="font-bold text-slate-800 dark:text-slate-100">
                {t('currentTasks')}
              </Typography>
            </div>
          </div>
          
          <div className="flex gap-2 mb-4 overflow-x-auto pb-2 hide-scrollbar">
            <Chip 
              label={`${todoTasks.length} ${t('pending')}`} 
              size="small" 
              className="bg-blue-100 text-blue-700 border-blue-200 border rounded-xl px-1 dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-800/50" 
            />
            <Chip 
              label={`${inProgressTasks.length} ${t('inProgress')}`} 
              size="small" 
              className="bg-amber-100 text-amber-700 border-amber-200 border rounded-xl px-1 dark:bg-amber-900/30 dark:text-amber-300 dark:border-amber-800/50" 
            />
            <Chip 
              label={`${doneTasks.length} ${t('completed')}`} 
              size="small" 
              className="bg-emerald-100 text-emerald-700 border-emerald-200 border rounded-xl px-1 dark:bg-emerald-900/30 dark:text-emerald-300 dark:border-emerald-800/50" 
            />
          </div>
          
          <Divider className="mb-4 border-slate-200 dark:border-slate-700" />
          
          <List className="p-0 overflow-y-auto max-h-[calc(100vh-400px)]">
            {filteredTasks.length > 0 ? (
              <DndContext
                sensors={sensors}
                collisionDetection={closestCenter}
                onDragStart={handleDragStart}
                onDragOver={handleDragOver}
                onDragEnd={handleDragEnd}
              >
                <SortableContext
                  items={filteredTasks.map(task => task.id)}
                  strategy={verticalListSortingStrategy}
                >
                  <div className="space-y-3">
                    {filteredTasks.map(task => (
                      <div key={task.id} className="relative group">
                        <TaskCard
                          id={task.id}
                          title={task.title}
                          description={task.description}
                          priority={task.priority}
                          assignedTo={task.assignedTo}
                          dueDate={task.dueDate}
                          status={task.status}
                          onClick={() => handleOpenEditModal(task)}
                        />
                        <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleOpenEditModal(task);
                            }}
                            className="text-gray-500 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 mr-1"
                          >
                            <span className="material-icons text-sm">edit</span>
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteTask(task.id);
                            }}
                            className="text-gray-500 hover:text-red-600 dark:text-gray-400 dark:hover:text-red-400"
                          >
                            <span className="material-icons text-sm">delete</span>
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </SortableContext>
              </DndContext>
            ) : (
              <Box className="text-center py-8">
                <Typography variant="body2" className="text-slate-500 italic">
                  {t('noTasksFound')}
                </Typography>
                <Button
                  variant="outlined"
                  color="primary"
                  size="small"
                  startIcon={<AddIcon />}
                  onClick={handleOpenCreateModal}
                  className="mt-2 rounded-xl"
                >
                  {t('addYourFirstTask')}
                </Button>
              </Box>
            )}
          </List>
        </CardContent>
      </Card>
      
      {/* Модальное окно для создания/редактирования задачи */}
      <TaskModal
        isOpen={showModal}
        onClose={handleCloseModal}
        onSave={handleSaveTask}
        task={currentTask as any}
        mode={modalMode}
      />
    </div>
  );
};

export default TasksPage; 